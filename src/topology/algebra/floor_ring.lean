/-
Copyright (c) 2020 Anatole Dedecker. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Anatole Dedecker

Basic topological facts (limits and continuity) about `floor`,
`ceil` and `fract` in a `floor_ring`.
-/
import topology.algebra.ordered

open set function filter
open_locale topological_space

variables {Œ± : Type*} [linear_ordered_ring Œ±] [floor_ring Œ±]

lemma tendsto_floor_at_top : tendsto (floor : Œ± ‚Üí ‚Ñ§) at_top at_top :=
begin
  refine monotone.tendsto_at_top_at_top (Œª a b hab, floor_mono hab) (Œª b, _),
  use (b : Œ±) + ((1 : ‚Ñ§) : Œ±),
  rw [floor_add_int, floor_coe],
  exact (lt_add_one _).le
end

lemma tendsto_floor_at_bot : tendsto (floor : Œ± ‚Üí ‚Ñ§) at_bot at_bot :=
begin
  refine monotone.tendsto_at_bot_at_bot (Œª a b hab, floor_mono hab) (Œª b, ‚ü®b, _‚ü©),
  rw floor_coe
end

lemma tendsto_ceil_at_top : tendsto (ceil : Œ± ‚Üí ‚Ñ§) at_top at_top :=
tendsto_neg_at_bot_at_top.comp (tendsto_floor_at_bot.comp tendsto_neg_at_top_at_bot)

lemma tendsto_ceil_at_bot : tendsto (ceil : Œ± ‚Üí ‚Ñ§) at_bot at_bot :=
tendsto_neg_at_top_at_bot.comp (tendsto_floor_at_top.comp tendsto_neg_at_bot_at_top)

variables [topological_space Œ±]

lemma continuous_on_floor (n : ‚Ñ§) : continuous_on (Œª x, floor x : Œ± ‚Üí Œ±) (Ico n (n+1) : set Œ±) :=
(continuous_on_congr $ floor_eq_on_Ico' n).mpr continuous_on_const

lemma continuous_on_ceil (n : ‚Ñ§) : continuous_on (Œª x, ceil x : Œ± ‚Üí Œ±) (Ioc (n-1) n : set Œ±) :=
(continuous_on_congr $ ceil_eq_on_Ioc' n).mpr continuous_on_const

lemma tendsto_floor_right' [order_closed_topology Œ±] (n : ‚Ñ§) :
  tendsto (Œª x, floor x : Œ± ‚Üí Œ±) (ùìù[Ici n] n) (ùìù n) :=
begin
  rw ‚Üê nhds_within_Ico_eq_nhds_within_Ici (lt_add_one (n : Œ±)),
  convert ‚Üê (continuous_on_floor _ _ (left_mem_Ico.mpr $ lt_add_one (_ : Œ±))).tendsto,
  rw floor_eq_iff,
  exact ‚ü®le_refl _, lt_add_one _‚ü©
end

lemma tendsto_ceil_left' [order_closed_topology Œ±] (n : ‚Ñ§) :
  tendsto (Œª x, ceil x : Œ± ‚Üí Œ±) (ùìù[Iic n] n) (ùìù n) :=
begin
  rw ‚Üê nhds_within_Ioc_eq_nhds_within_Iic (sub_one_lt (n : Œ±)),
  convert ‚Üê (continuous_on_ceil _ _ (right_mem_Ioc.mpr $ sub_one_lt (_ : Œ±))).tendsto,
  rw ceil_eq_iff,
  exact ‚ü®sub_one_lt _, le_refl _‚ü©
end

lemma tendsto_floor_right [order_closed_topology Œ±] (n : ‚Ñ§) :
  tendsto (Œª x, floor x : Œ± ‚Üí Œ±) (ùìù[Ici n] n) (ùìù[Ici n] n) :=
tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _ (tendsto_floor_right' _)
begin
  refine (eventually_nhds_with_of_forall $ Œª x (hx : (n : Œ±) ‚â§ x), _),
  change _ ‚â§ _,
  norm_cast,
  convert ‚Üê floor_mono hx,
  rw floor_eq_iff,
  exact ‚ü®le_refl _, lt_add_one _‚ü©
end

lemma tendsto_ceil_left [order_closed_topology Œ±] (n : ‚Ñ§) :
  tendsto (Œª x, ceil x : Œ± ‚Üí Œ±) (ùìù[Iic n] n) (ùìù[Iic n] n) :=
tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _ (tendsto_ceil_left' _)
begin
  refine (eventually_nhds_with_of_forall $ Œª x (hx : x ‚â§ (n : Œ±)), _),
  change _ ‚â§ _,
  norm_cast,
  convert ‚Üê ceil_mono hx,
  rw ceil_eq_iff,
  exact ‚ü®sub_one_lt _, le_refl _‚ü©
end

lemma tendsto_floor_left [order_closed_topology Œ±] (n : ‚Ñ§) :
  tendsto (Œª x, floor x : Œ± ‚Üí Œ±) (ùìù[Iio n] n) (ùìù[Iic (n-1)] (n-1)) :=
begin
  rw ‚Üê nhds_within_Ico_eq_nhds_within_Iio (sub_one_lt (n : Œ±)),
  convert (tendsto_nhds_within_congr $ (Œª x hx, (floor_eq_on_Ico' (n-1) x hx).symm))
    (tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _ tendsto_const_nhds
      (eventually_of_forall (Œª _, mem_Iic.mpr $ le_refl _)));
  norm_cast <|> apply_instance,
  ring
end

lemma tendsto_ceil_right [order_closed_topology Œ±] (n : ‚Ñ§) :
  tendsto (Œª x, ceil x : Œ± ‚Üí Œ±) (ùìù[Ioi n] n) (ùìù[Ici (n+1)] (n+1)) :=
begin
  rw ‚Üê nhds_within_Ioc_eq_nhds_within_Ioi (lt_add_one (n : Œ±)),
  convert (tendsto_nhds_within_congr $ (Œª x hx, (ceil_eq_on_Ioc' (n+1) x hx).symm))
    (tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _ tendsto_const_nhds
      (eventually_of_forall (Œª _, mem_Ici.mpr $ le_refl _)));
  norm_cast <|> apply_instance,
  ring
end

lemma tendsto_floor_left' [order_closed_topology Œ±] (n : ‚Ñ§) :
  tendsto (Œª x, floor x : Œ± ‚Üí Œ±) (ùìù[Iio n] n) (ùìù (n-1)) :=
begin
  rw ‚Üê nhds_within_univ,
  exact tendsto_nhds_within_mono_right (subset_univ _) (tendsto_floor_left n),
end

lemma tendsto_ceil_right' [order_closed_topology Œ±] (n : ‚Ñ§) :
  tendsto (Œª x, ceil x : Œ± ‚Üí Œ±) (ùìù[Ioi n] n) (ùìù (n+1)) :=
begin
  rw ‚Üê nhds_within_univ,
  exact tendsto_nhds_within_mono_right (subset_univ _) (tendsto_ceil_right n),
end

lemma continuous_on_fract [topological_add_group Œ±] (n : ‚Ñ§) :
  continuous_on (fract : Œ± ‚Üí Œ±) (Ico n (n+1) : set Œ±) :=
continuous_on_id.sub (continuous_on_floor n)

lemma tendsto_fract_left' [order_closed_topology Œ±] [topological_add_group Œ±]
  (n : ‚Ñ§) : tendsto (fract : Œ± ‚Üí Œ±) (ùìù[Iio n] n) (ùìù 1) :=
begin
  convert (tendsto_nhds_within_of_tendsto_nhds tendsto_id).sub (tendsto_floor_left' n);
  [{norm_cast, ring}, apply_instance, apply_instance]
end

lemma tendsto_fract_left [order_closed_topology Œ±] [topological_add_group Œ±]
  (n : ‚Ñ§) : tendsto (fract : Œ± ‚Üí Œ±) (ùìù[Iio n] n) (ùìù[Iio 1] 1) :=
tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _
  (tendsto_fract_left' _) (eventually_of_forall fract_lt_one)

lemma tendsto_fract_right' [order_closed_topology Œ±] [topological_add_group Œ±]
  (n : ‚Ñ§) : tendsto (fract : Œ± ‚Üí Œ±) (ùìù[Ici n] n) (ùìù 0) :=
begin
  convert (tendsto_nhds_within_of_tendsto_nhds tendsto_id).sub (tendsto_floor_right' n);
  [exact (sub_self _).symm, apply_instance, apply_instance]
end

lemma tendsto_fract_right [order_closed_topology Œ±] [topological_add_group Œ±]
  (n : ‚Ñ§) : tendsto (fract : Œ± ‚Üí Œ±) (ùìù[Ici n] n) (ùìù[Ici 0] 0) :=
tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _
  (tendsto_fract_right' _) (eventually_of_forall fract_nonneg)

local notation `I` := (Icc 0 1 : set Œ±)

lemma continuous_on.comp_fract' {Œ≤ Œ≥ : Type*} [order_topology Œ±]
  [topological_add_group Œ±] [topological_space Œ≤] [topological_space Œ≥] {f : Œ≤ ‚Üí Œ± ‚Üí Œ≥}
  (h : continuous_on (uncurry f) $ (univ : set Œ≤).prod I) (hf : ‚àÄ s, f s 0 = f s 1) :
  continuous (Œª st : Œ≤ √ó Œ±, f st.1 $ fract st.2) :=
begin
  change continuous ((uncurry f) ‚àò (prod.map id (fract))),
  rw continuous_iff_continuous_at,
  rintro ‚ü®s, t‚ü©,
  by_cases ht : t = floor t,
  { rw ht,
    rw ‚Üê continuous_within_at_univ,
    have : (univ : set (Œ≤ √ó Œ±)) ‚äÜ (set.prod univ (Iio $ floor t)) ‚à™ (set.prod univ (Ici $ floor t)),
    { rintros p -,
      rw ‚Üê prod_union,
      exact ‚ü®true.intro, lt_or_le _ _‚ü© },
    refine continuous_within_at.mono _ this,
    refine continuous_within_at.union _ _,
    { simp only [continuous_within_at, fract_coe, nhds_within_prod_eq,
                  nhds_within_univ, id.def, comp_app, prod.map_mk],
      have : (uncurry f) (s, 0) = (uncurry f) (s, (1 : Œ±)),
        by simp [uncurry, hf],
      rw this,
      refine (h _ ‚ü®true.intro, by exact_mod_cast right_mem_Icc.mpr zero_le_one‚ü©).tendsto.comp _,
      rw [nhds_within_prod_eq, nhds_within_univ],
      rw nhds_within_Icc_eq_nhds_within_Iic (@zero_lt_one Œ± _ _),
      exact tendsto_id.prod_map
        (tendsto_nhds_within_mono_right Iio_subset_Iic_self $ tendsto_fract_left _) },
    { simp only [continuous_within_at, fract_coe, nhds_within_prod_eq,
                  nhds_within_univ, id.def, comp_app, prod.map_mk],
      refine (h _ ‚ü®true.intro, by exact_mod_cast left_mem_Icc.mpr zero_le_one‚ü©).tendsto.comp _,
      rw [nhds_within_prod_eq, nhds_within_univ, nhds_within_Icc_eq_nhds_within_Ici (@zero_lt_one Œ± _ _)],
      exact tendsto_id.prod_map (tendsto_fract_right _) } },
  { have : t ‚àà Ioo (floor t : Œ±) ((floor t : Œ±) + 1),
      from ‚ü®lt_of_le_of_ne (floor_le t) (ne.symm ht), lt_floor_add_one _‚ü©,
    refine (h ((prod.map _ fract) _) ‚ü®trivial, ‚ü®fract_nonneg _, (fract_lt_one _).le‚ü©‚ü©).tendsto.comp _,
    simp only [nhds_prod_eq, nhds_within_prod_eq, nhds_within_univ, id.def, prod.map_mk],
    exact continuous_at_id.tendsto.prod_map
            (tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _
              (((continuous_on_fract _ _ (Ioo_subset_Ico_self this)).mono
                  Ioo_subset_Ico_self).continuous_at (Ioo_mem_nhds this.1 this.2))
              (eventually_of_forall (Œª x, ‚ü®fract_nonneg _, (fract_lt_one _).le‚ü©)) ) }
end

lemma continuous_on.comp_fract {Œ≤ : Type*} [order_topology Œ±]
  [topological_add_group Œ±] [topological_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (h : continuous_on f I) (hf : f 0 = f 1) : continuous (f ‚àò fract) :=
begin
  let f' : unit ‚Üí Œ± ‚Üí Œ≤ := Œª x y, f y,
  have : continuous_on (uncurry f') ((univ : set unit).prod I),
  { rintros ‚ü®s, t‚ü© ‚ü®-, ht : t ‚àà I‚ü©,
    simp only [continuous_within_at, uncurry, nhds_within_prod_eq, nhds_within_univ, f'],
    rw tendsto_prod_iff,
    intros W hW,
    specialize h t ht hW,
    rw mem_map_sets_iff at h,
    rcases h with ‚ü®V, hV, hVW‚ü©,
    rw image_subset_iff at hVW,
    use [univ, univ_mem_sets, V, hV],
    intros x y hx hy,
    exact hVW hy },
  have key : continuous (Œª s, ‚ü®unit.star, s‚ü© : Œ± ‚Üí unit √ó Œ±) := by continuity,
  exact (this.comp_fract' (Œª s, hf)).comp key
end
