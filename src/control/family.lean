/-
Copyright (c) 2019 Simon Hudon. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Simon Hudon
-/
import category_theory.category
import category_theory.types
import category_theory.pi.basic
import category_theory.limits.pi
import category_theory.limits.shapes.binary_products
import category_theory.limits.shapes.types
import logic.relation

/-!
Indexed type families and their categorical structure.

Features:

`fam I`      : family of types and its instance of `category`

Also, support functions for operating with n-tuples of types, such as:

`append1 Œ± Œ≤`    : append type J-indexed `Œ≤` family to I-indexed `Œ±` family to obtain a `(I‚äïJ)`-indexed family
`drop Œ±`         : drop the right component of a `(I‚äïJ)`-indexed family
`last Œ±`         : take the right component of a `(I‚äïJ)`-indexed family
`append_fun f g` : appends two families of functions `f` and `g`
`drop_fun f`     : drops the right function family from a `(I‚äïJ)`-indexed family
`last_fun f`     : returns the right function family of a `(I‚äïJ)`-indexed family

Since e.g. `append1 Œ±.drop Œ±.last` is propositionally equal to `Œ±` but not definitionally equal
to it, we need support functions and lemmas to mediate between constructions.
-/

universes u v w

open category_theory

/-- Type family indexed by `I`; we call `fam (I ‚äï J)` the product
of `fam I` and `fam J` (despite being formulated using a sum type) -/
@[derive inhabited] def fam (I : Type u) := I ‚Üí Type u

instance {I} : has_one (fam I) :=
‚ü® Œª _, punit ‚ü©

namespace fam

variables {I J : Type u}

/-- retain the left side of a product family -/
def drop : fam (I ‚äï J) ‚Üí fam I :=
Œª x i, x (sum.inl i)

/-- retain the right side of a product family -/
def last : fam (I ‚äï J) ‚Üí fam J :=
Œª x i, x (sum.inr i)

/-- combine two families with different indices their product -/
def append1 (f : fam I) (g : fam J) : fam (I ‚äï J)
| (sum.inl i) := f i
| (sum.inr i) := g i

end fam

instance fam.category {I : Type u} : category $ fam I :=
category_theory.pi _

namespace fam

variables {I J : Type u}

lemma ext (X Y : fam I) (f g : X ‚ü∂ Y) (h : ‚àÄ i (x : X i), f _ x = g _ x) : f = g :=
funext $ Œª i, funext $ h _

/-- obtain an arrow over the product of two families by combining an arrow over its left side and
an arrow over its right side  -/
def split_fun {Œ± Œ≤ : fam (I‚äïJ)} :
  Œ† (f : drop Œ± ‚ü∂ drop Œ≤) (g : last Œ± ‚ü∂ last Œ≤), Œ± ‚ü∂ Œ≤
| f g (sum.inl i) x := f i x
| f g (sum.inr i) x := g i x

/-- combine two arrows over different categories of families into an arrow on their product -/
def append_fun {Œ± Œ≤ : fam I} {Œ±' Œ≤' : fam J} (f : Œ± ‚ü∂ Œ≤) (g : Œ±' ‚ü∂ Œ≤') : (Œ±.append1 Œ±' ‚ü∂ Œ≤.append1 Œ≤') :=
split_fun f g

lemma split_fun_comp {Œ± Œ≤ Œ≥ : fam (I‚äïJ)}
  (f : drop Œ± ‚ü∂ drop Œ≤) (g : drop Œ≤ ‚ü∂ drop Œ≥) (f' : last Œ± ‚ü∂ last Œ≤) (g' : last Œ≤ ‚ü∂ last Œ≥) :
  split_fun (f ‚â´ g) (f' ‚â´ g') = split_fun f f' ‚â´ split_fun g g' :=
by ext (x|x) : 1; ext; refl

lemma append_fun_comp {Œ± Œ≤ Œ≥ : fam I} {Œ±' Œ≤' Œ≥' : fam J}
  (f : Œ± ‚ü∂ Œ≤) (f' : Œ±' ‚ü∂ Œ≤') (g : Œ≤ ‚ü∂ Œ≥) (g' : Œ≤' ‚ü∂ Œ≥') :
  append_fun (f ‚â´ g) (f' ‚â´ g') = append_fun f f' ‚â´ append_fun g g' :=
by erw ‚Üê split_fun_comp; refl

lemma append_fun_comp_right {Œ± Œ≥ : fam I} {Œ±' Œ≤' Œ≥' : fam J}
  (f : Œ± ‚ü∂ Œ≥) (f' : Œ±' ‚ü∂ Œ≤') (g' : Œ≤' ‚ü∂ Œ≥') :
  append_fun f (f' ‚â´ g') = append_fun f f' ‚â´ append_fun (ùüô _) g' :=
by erw ‚Üê split_fun_comp; refl

lemma split_fun_comp_right {Œ± : fam (I‚äïJ)} {Œ≤ Œ≥ : fam J} {Œ≥' : fam I}
  (f : drop Œ± ‚ü∂ Œ≥')
  (f' : last Œ± ‚ü∂ Œ≤) (g' : Œ≤ ‚ü∂ Œ≥) :
  (split_fun f (f' ‚â´ g') : Œ± ‚ü∂ Œ≥'.append1 Œ≥) =
  (split_fun f f' : Œ± ‚ü∂ Œ≥'.append1 Œ≤) ‚â´ split_fun (ùüô _) g' :=
by rw [‚Üê split_fun_comp,category.comp_id]

/-- take the left side of an arrow on a product of two families -/
def drop_fun {Œ± Œ≤ : fam (I‚äïJ)} : Œ† (f : Œ± ‚ü∂ Œ≤), drop Œ± ‚ü∂ drop Œ≤
| f i x := f (sum.inl i) x

/-- take the right side of an arrow on a product of two families -/
def last_fun {Œ± Œ≤ : fam (I‚äïJ)} : Œ† (f : Œ± ‚ü∂ Œ≤), last Œ± ‚ü∂ last Œ≤
| f i x := f (sum.inr i) x

theorem eq_of_drop_last_eq {Œ± Œ≤ : fam (I‚äïJ)} {f g : Œ± ‚ü∂ Œ≤}
  (h‚ÇÄ : ‚àÄ j (x : Œ± (sum.inl j)), drop_fun f _ x = drop_fun g _ x) (h‚ÇÅ : last_fun f = last_fun g) :
  f = g :=
by { ext1 (i|j); ext1 x, apply h‚ÇÄ, apply congr_fun (congr_fun h‚ÇÅ j), }

@[simp]
theorem split_drop_fun_last_fun {Œ± Œ±' : fam (I‚äïJ)} (f : Œ± ‚ü∂ Œ±') :
  split_fun (drop_fun f) (last_fun f) = f :=
eq_of_drop_last_eq (Œª _ _, rfl) (funext $ Œª _, funext $ Œª _, rfl)

theorem append_fun_id_id {Œ± : fam I} {Œ≤ : fam J} :
  append_fun (ùüô Œ±) (ùüô Œ≤) = ùüô _ :=
by apply eq_of_drop_last_eq; intros; try { ext }; refl

/-- `unit i` is an object in `fam I` such that has only one
member and that its index is `i` -/
inductive unit (i : I) : I ‚Üí Type u
| rfl {} : unit i

instance fam.unit.inhabited {i : I} : inhabited (unit i i) := ‚ü® unit.rfl ‚ü©

/-- given a value of a type family, give an arrow to that object -/
def value (i) (X : fam I) : X i ‚Üí (unit i ‚ü∂ X)
| x j unit.rfl := x

theorem value.get {i} {X : fam I} (f g : unit i ‚ü∂ X) (h : f = g) : f _ unit.rfl = g _ unit.rfl :=
by rw h

theorem value.ext {i} {X : fam I} (f g : unit i ‚ü∂ X) (h : f _ unit.rfl = g _ unit.rfl) : f = g :=
by ext _ ‚ü® ‚ü©; exact h

@[simp]
lemma value_eq  (i) (X : fam I) (x : X i) : Œ† {u : unit i i}, value i X x _ u = x
| unit.rfl := rfl

/-- predicate over the values in type family `Œ±` -/
@[pp_nodot, derive inhabited]
def Pred (Œ± : fam I) : Sort* := ‚àÄ i, Œ± i ‚Üí Prop

/-- introduction rule for `Pred Œ±` -/
def Pred.mk {Œ± : fam I} (p : Œ† i, (unit i ‚ü∂ Œ±) ‚Üí Prop) : Pred Œ± :=
Œª i x, p i $ value i _ x

/-- elimination rule for `Pred Œ±` -/
def Pred.apply {Œ± : fam I} (p : Pred Œ±) : ‚àÄ ‚¶Éi‚¶Ñ, (unit i ‚ü∂ Œ±) ‚Üí Prop :=
Œª i f, p i $ f _ unit.rfl

@[simp]
lemma Pred.apply_mk {Œ± : fam I} (p : Œ† i, (unit i ‚ü∂ Œ±) ‚Üí Prop) :
  Pred.apply (Pred.mk p) = p :=
by ext : 2; simp [Pred.apply,Pred.mk]; congr'; ext _ ‚ü® ‚ü©; refl

@[simp]
lemma Pred.mk_to_fun {Œ± : fam I} (p : Œ† i, (unit i ‚ü∂ Œ±) ‚Üí Prop) {i} (x : Œ± i) :
  Pred.mk p i x = p i (value i _ x) := rfl

@[simp]
lemma Pred.mk_apply {Œ± : fam I} (p : Pred Œ±) :
  Pred.mk (Pred.apply p) = p := by ext; refl

/-- contravariant map function for `Pred` -/
def Pred.map {Œ± Œ≤ : fam I} (f : Œ± ‚ü∂ Œ≤) (p : Pred Œ≤) : Pred Œ± :=
Œª i x, p i (f _ x)

lemma Pred.map_mk {Œ± Œ≤ : fam I} (f : Œ± ‚ü∂ Œ≤) (p : Œ† ‚¶Éi‚¶Ñ, (unit i ‚ü∂ Œ≤) ‚Üí Prop) :
  Pred.map f (Pred.mk p) = Pred.mk (Œª i g, p (g ‚â´ f)) :=
by ext; simp [Pred.mk,Pred.map]; congr'; ext _ ‚ü® ‚ü©; refl

/-- subtypes as an object of a type family category -/
@[reducible]
def subtype {Œ± : fam I} (p : Pred Œ±) : fam I :=
Œª i, subtype (p i)

/-- introduction rule for `subtype` object -/
@[reducible]
def subtype.lift {Œ± Œ≤ : fam I} (p : Pred Œ≤)
  (f : Œ± ‚ü∂ Œ≤) (h : ‚àÄ i x, p i (f _ x)) : Œ± ‚ü∂ subtype p :=
Œª i (x : Œ± i), subtype.mk (f _ x) (h i _)

/-- elimination rule for `subtype` object -/
def subtype.val {Œ± : fam I} {p : Pred Œ±} : fam.subtype p ‚ü∂ Œ± :=
Œª i, subtype.val

/-- map function on the predicate of `subtype` -/
def subtype.map {Œ± Œ≤ : fam I} (p : Pred Œ±) (q : Pred Œ≤)
  (f : Œ± ‚ü∂ Œ≤) (h : ‚àÄ i x, p i x ‚Üí q i (f _ x)) :
  fam.subtype p ‚ü∂ fam.subtype q :=
Œª i (x : subtype p i), subtype.mk (f _ x.1) (h i _ x.2)

@[simp, reassoc]
lemma subtype.lift_val {Œ± Œ≤ : fam I} (p : Pred Œ≤)
  (f : Œ± ‚ü∂ Œ≤) (h : ‚àÄ i x, p i (f _ x)) :
  subtype.lift p f h ‚â´ fam.subtype.val = f :=
by ext _ ‚ü® ‚ü© : 2; refl

lemma subtype.ext {Œ± : fam I} {p : Pred Œ± } {X} (a b : X ‚ü∂ subtype p)
  (h : a ‚â´ subtype.val = b ‚â´ subtype.val) : a = b :=
by ext : 2; rw subtype.ext_iff; apply congr_fun (congr_fun h x)

@[simp,reassoc]
lemma subtype.map_val {Œ± Œ≤ : fam I} {p : Pred Œ±} {q : Pred Œ≤} (a : Œ± ‚ü∂ Œ≤) (h) :
  subtype.map p q a h ‚â´ subtype.val = subtype.val ‚â´ a :=
by ext _ ‚ü® ‚ü© : 2; refl

local attribute [instance] category_theory.pi.has_limit_of_has_limit_comp_eval category_theory.pi.has_colimit_of_has_colimit_comp_eval

instance : limits.has_binary_products (fam I) :=
‚ü® by apply_instance  ‚ü©

instance : limits.has_binary_coproducts (fam I) :=
‚ü® by apply_instance  ‚ü©

/-- Propositional equality between values as a `Pred` -/
protected def eq (Œ± : fam I) : Pred (Œ± ‚®Ø Œ±) :=
Œª i x, @limits.prod.fst (fam I) _ Œ± Œ± _ _ x = @limits.prod.snd (fam I) _ Œ± Œ± _ _ x

/-- Application of predicate `p` to the target of arrow `f`. `f ‚ä® p` is a proposition that
states that predicate `p` holds on the target object of `f`. -/
def sat {X Œ± : fam J} (f : X ‚ü∂ Œ±) (p : fam.Pred Œ±) : Prop :=
‚àÉ f' : X ‚ü∂ subtype p, f = f' ‚â´ fam.subtype.val

infix ` ‚ä® `:50 := sat

/-- introduction rule of binary products specialized to type families -/
def prod.mk {X Y : fam I} {i} (x : X i) (y : Y i) : (X ‚®Ø Y) i :=
(limits.prod.lift (value _ _ x) (value _ _ y) : unit i ‚ü∂ X ‚®Ø Y) i unit.rfl

/-- first projection of binary products specialized to type families -/
def prod.fst {X Y : fam I} : Œ† i, (X ‚®Ø Y) i ‚Üí X i :=
(limits.prod.fst : X ‚®Ø Y ‚ü∂ X)

/-- second projection of binary products specialized to type families -/
def prod.snd {X Y : fam I} : Œ† i, (X ‚®Ø Y) i ‚Üí Y i :=
(limits.prod.snd : X ‚®Ø Y ‚ü∂ Y)

lemma prod.mk_fst_snd {X Y : fam I} {i} (a : (X ‚®Ø Y) i) : fam.prod.mk (fam.prod.fst i a) (fam.prod.snd i a) = a :=
begin
  change _ = value _ _ a i unit.rfl,
  dsimp [fam.prod.mk],
  suffices : limits.prod.lift (value i (X ‚®Ø Y) a ‚â´ limits.prod.fst) (value i (X ‚®Ø Y) a ‚â´ limits.prod.snd) =
    value i (X ‚®Ø Y) a,
  { rw ‚Üê this, congr; ext _ ‚ü® ‚ü©; refl },
  ext1; simp only [limits.prod.lift_snd, limits.prod.lift_fst],
end

lemma congr_arrow {X Y : fam J} {f g : X ‚ü∂ Y} (h : f = g) : ‚àÄ ‚¶Éi‚¶Ñ x, @f i x = @g i x :=
Œª i, congr_fun (congr_fun h i)

lemma sat_intro {X Œ± : fam J} (f : X ‚ü∂ Œ±) (p : fam.Pred Œ±) (h : ‚àÄ i x, p i (f i x)) : f ‚ä® p :=
‚ü® Œª i x, ‚ü®f i x, h _ _‚ü©, by ext; refl ‚ü©

lemma sat_elim {X Œ± : fam J} (f : X ‚ü∂ Œ±) (p : fam.Pred Œ±) : f ‚ä® p ‚Üí ‚àÄ ‚¶Éi‚¶Ñ x, p i (f i x)
| ‚ü®a,b‚ü© i x := b.symm ‚ñ∏ (a i x).property

lemma sat_mk_elim {X Œ± : fam J} (f : X ‚ü∂ Œ±) (p : Œ† i, (unit i ‚ü∂ Œ±) ‚Üí Prop) :
  f ‚ä® Pred.mk p ‚Üí ‚àÄ ‚¶Éi‚¶Ñ x, p i (x ‚â´ f)
| ‚ü®a,b‚ü© i x := by convert (a _ $ x _ unit.rfl).property; ext _ ‚ü® ‚ü©; rw b; refl

lemma sat_mk_intro {X Œ± : fam J} (f : X ‚ü∂ Œ±) (p : Œ† i, (unit i ‚ü∂ Œ±) ‚Üí Prop) (h : ‚àÄ ‚¶Éi‚¶Ñ x, p i (x ‚â´ f)) :
  f ‚ä® Pred.mk p :=
sat_intro _ _ $ Œª i x,
by simp; convert h (value i _ x); ext _ ‚ü® ‚ü©; refl

lemma sat_map {Œ± Œ≤ X : fam J} (x : X ‚ü∂ Œ≤) (f : Œ≤ ‚ü∂ Œ±) (g : Œ± ‚ü∂ Œ≤)
  (r : Pred Œ≤) (hh : f ‚â´ g = ùüô _) :
  x ‚ä® r ‚Üí x ‚â´ f ‚ä® r.map g
| ‚ü®h,h'‚ü© := ‚ü®Œª i y, ‚ü®f _ (h _ y).1,
  by { replace hh := congr_arrow hh, simp at hh,
       simp [Pred.map,hh], apply (h _ y).2 }‚ü©,
  by { ext, simp [h'], refl } ‚ü©

lemma sat_map‚ÇÄ {Œ± Œ≤ X : fam J} (x : X ‚ü∂ Œ±) (g : Œ± ‚ü∂ Œ≤)
  (r : Pred Œ≤) :
  x ‚â´ g ‚ä® r ‚Üí x ‚ä® r.map g
| ‚ü®h,h'‚ü© := ‚ü®Œª i y, ‚ü®x _ y,
  by { replace h' := congr_arrow h' y, simp at h',
       simp [Pred.map,h'], apply (h _ y).2 }‚ü©, by ext; refl‚ü©

lemma sat_map‚ÇÅ {Œ± Œ≤ X : fam J} (x : X ‚ü∂ Œ±) (g : Œ± ‚ü∂ Œ≤)
  (r : Pred Œ≤) :
  x ‚ä® r.map g ‚Üí x ‚â´ g ‚ä® r
| ‚ü®h,h'‚ü© := ‚ü®Œª i y, ‚ü®g _ (x _ y), h'.symm ‚ñ∏ (h _ y).2‚ü©, by ext; refl ‚ü©

lemma comp_sat {Œ± Œ≤ X : fam J} (x : X ‚ü∂ Œ±) (g : Œ± ‚ü∂ Œ≤)
  (r : Pred Œ≤) :
  g ‚ä® r ‚Üí x ‚â´ g ‚ä® r
| ‚ü®f,h‚ü© := ‚ü®x ‚â´ f,by rw [h,category.assoc]‚ü©

lemma sat_map' {Œ± Œ≤ X : fam J} (x : X ‚ü∂ Œ≤) (f : Œ≤ ‚ü∂ Œ±) (g : Œ± ‚ü∂ Œ≤)
  (r : Pred Œ≤) (hh : f ‚â´ g = ùüô _) :
  x ‚â´ f ‚ä® r.map g ‚Üí x ‚ä® r
| ‚ü®h,h'‚ü© := ‚ü®h ‚â´ subtype.map _ _ g (Œª i x h, h), by simp only [‚Üê reassoc_of h', hh, subtype.map_val, category.comp_id, category.assoc]‚ü©

/-- quotient type as an object of category `fam I` -/
def quot {Œ± : fam I} (r : Pred (Œ± ‚®Ø Œ±)) : fam I :=
Œª i, quot (Œª x y, r i $ fam.prod.mk x y)

namespace quot

variables {Œ± Œ≤ Œ≥ : fam I}  (r : Pred (Œ± ‚®Ø Œ±))

/-- elimination rule for `fam.quot` -/
def lift (f : Œ± ‚ü∂ Œ≤)
  (h : ‚àÄ {i} (a : unit i ‚ü∂ Œ± ‚®Ø Œ±), a ‚ä® r ‚Üí a ‚â´ limits.prod.fst ‚â´ f = a ‚â´ limits.prod.snd ‚â´ f) :
  (quot r ‚ü∂ Œ≤) :=
Œª i x, quot.lift (@f i) (Œª a b h',
  let d := value i (fam.subtype r) (subtype.mk (fam.prod.mk a b) h') in
  have _, from h (limits.prod.lift (value _ _ a) (value _ _ b)) (sat_intro _ _ (Œª _ h, by cases h; apply h')),
  by simp at this; apply congr_fun (congr_fun this i) unit.rfl) x

/-- introduction rule for `fam.quot` -/
def mk : Œ± ‚ü∂ quot r :=
Œª (i : I) (x : Œ± i), quot.mk _ x

/-- noncomputable elimination rule for `fam.quot` -/
noncomputable def out : quot r ‚ü∂ Œ± :=
Œª i x, quot.out x

variables {r}

@[simp, reassoc]
lemma mk_lift (g : Œ± ‚ü∂ Œ≤) (h) :
  quot.mk r ‚â´ lift r g h = g :=
by ext; refl

@[reassoc]
lemma lift_comp (f : Œ± ‚ü∂ Œ≤) (g : Œ≤ ‚ü∂ Œ≥) (h) :
  lift r f h ‚â´ g = lift r (f ‚â´ g) (by intros; reassoc h; rw h _ a_1) :=
by { ext, dsimp [lift,(‚â´)], induction x_1 using quot.ind, refl }

lemma lift_ext (f g : quot r ‚ü∂ Œ≤)
      (hh : quot.mk r ‚â´ f = quot.mk r ‚â´ g) :
  f = g :=
begin
  ext a b, apply quot.induction_on b,
  intros y, apply congr_arrow hh
end

lemma sound (f : Œ≤ ‚ü∂ Œ± ‚®Ø Œ±)
      (hh : f ‚ä® r) :
  f ‚â´ limits.prod.fst ‚â´ quot.mk r = f ‚â´ limits.prod.snd ‚â´ quot.mk r :=
begin
  cases hh with f' hh, rw hh,
  ext i x, simp [(‚â´)], apply quot.sound,
  rcases (f' i x) with ‚ü®‚ü®a,b‚ü©,h‚ü©,
  convert h, ext, cases x_1; refl,
end

lemma sound'' {f g : Œ≤ ‚ü∂ quot r} (f' g' : Œ≤ ‚ü∂ Œ±)
      (hh : limits.diag Œ≤ ‚â´ limits.prod.map f' g' ‚ä® r)
      (hh_f : f = f' ‚â´ quot.mk r)
      (hh_g : g = g' ‚â´ quot.mk r) :
  f = g :=
by { ext i x; rw [hh_f,hh_g],
     apply _root_.quot.sound; cases hh with h h',
     replace h' := congr_arrow h' x,
     simp at h',
     convert (h i x).property, convert h',
     ext ‚ü® ‚ü©; refl }

lemma sound' (f g : Œ≤ ‚ü∂ Œ±)
      (hh : limits.diag Œ≤ ‚â´ limits.prod.map f g ‚ä® r) :
  f ‚â´ quot.mk r = g ‚â´ quot.mk r :=
by apply sound'' f g hh rfl rfl

lemma ind_on (f : Œ≤ ‚ü∂ quot r) : (‚àÉ g, f = g ‚â´ quot.mk _) :=
‚ü®f ‚â´ fam.quot.out _, by ext; simp [mk,out]‚ü©

@[simp, reassoc]
lemma out_mk (r : Pred (Œ± ‚®Ø Œ±)) : quot.out r ‚â´ quot.mk r = ùüô _ :=
by ext; apply quot.out_eq

open function

/-- swap the components of a product -/
def prod.swap : Œ± ‚®Ø Œ≤ ‚ü∂ Œ≤ ‚®Ø Œ± :=
limits.prod.lift limits.prod.snd limits.prod.fst

@[simp, reassoc]
lemma prod.lift_swap {Œ± Œ≤ Œ≤' : fam I} (f : Œ± ‚ü∂ Œ≤) (g : Œ± ‚ü∂ Œ≤') :
  limits.prod.lift f g ‚â´ prod.swap = limits.prod.lift g f :=
by ext1; simp only [prod.swap, limits.prod.lift_fst, limits.prod.lift_snd, category.assoc]

@[simp, reassoc]
lemma prod.swap_fst : prod.swap ‚â´ limits.prod.fst = (limits.prod.snd : Œ± ‚®Ø Œ≤ ‚ü∂ Œ≤) :=
by simp [prod.swap]

@[simp, reassoc]
lemma prod.swap_snd : prod.swap ‚â´ limits.prod.snd = (limits.prod.fst : Œ± ‚®Ø Œ≤ ‚ü∂ Œ±) :=
by simp [prod.swap]

/-!
The following three definitions, `to_ab`, `to_bc` and `to_ac`,
are used to select two objects from a triple. They are used to
formulate transitivity using categorical notation.  -/

/-- Projection from a product of three components to the
two left-most components -/
def to_ab : Œ± ‚®Ø Œ≤ ‚®Ø Œ≥ ‚ü∂ Œ± ‚®Ø Œ≤ := limits.prod.fst

/-- Projection from a product of three components to the
two right-most components -/
def to_bc : Œ± ‚®Ø Œ≤ ‚®Ø Œ≥ ‚ü∂ Œ≤ ‚®Ø Œ≥ := limits.prod.map limits.prod.snd (ùüô _)

/-- Projection from a product of three components to the
left-most and right-most components -/
def to_ac : Œ± ‚®Ø Œ≤ ‚®Ø Œ≥ ‚ü∂ Œ± ‚®Ø Œ≥ := limits.prod.map limits.prod.fst (ùüô _)

/--
Definition of equivalence relations for predicates on products
-/
structure equiv (r : Pred (Œ± ‚®Ø Œ±)) : Prop :=
(refl : limits.diag Œ± ‚ä® r)
(symm : ‚àÄ {i} (f : i ‚ü∂ Œ± ‚®Ø Œ±), f ‚ä® r ‚Üí f ‚â´ prod.swap ‚ä® r)
  /- `trans` encodes transitivity: forall all triple of variables `(a,b,c)`,
     (which we call `abc : unit i ‚ü∂ Œ± ‚äó Œ± ‚äó Œ±`),
     if `r (a,b)` (encoded `abc ‚â´ to_ab ‚ä® r`) and
     if `r (b,c)` (encoded `abc ‚â´ to_bc ‚ä® r`)
     then `r (a,c)` (encoded `abc ‚â´ to_ac ‚ä® r`)  -/
(trans : ‚àÄ {i} (abc : i ‚ü∂ Œ± ‚®Ø Œ± ‚®Ø Œ±), abc ‚â´ to_ab ‚ä® r ‚Üí abc ‚â´ to_bc ‚ä® r ‚Üí abc ‚â´ to_ac ‚ä® r)

lemma equiv.to_equivalence {r : Pred (Œ± ‚®Ø Œ±)} (h : equiv r) :
  ‚àÄ i, _root_.equivalence $ Œª x y : Œ± i, limits.prod.lift (value _ _ x) (value _ _ y) ‚ä® r :=
begin
  cases h, intro j, refine ‚ü®_,_,_‚ü©,
  { intros x, cases h_refl,
    have := whisker_eq (value _ _ x) h_refl_h,
    simp only [‚Üêlimits.prod.lift_comp_comp, category.comp_id] at this,
    rw this, existsi [value _ _ x ‚â´ h_refl_w], simp },
  { intros x y h,
    replace h_symm := h_symm _ h,
    simpa only [prod.lift_swap] using h_symm },
  { intros x y z h h',
    specialize h_trans (limits.prod.lift (limits.prod.lift (value _ _ x) (value _ _ y)) (value _ _ z)) _ _,
    { simpa only [to_ac, limits.prod.lift_map, limits.prod.lift_fst, category.comp_id] using h_trans, },
    all_goals
    { simpa only [to_bc, limits.prod.lift_map, limits.prod.lift_fst, category.comp_id], }, },
end

lemma equiv.to_equivalence' {r : Pred (Œ± ‚®Ø Œ±)} (h : equiv r) :
  ‚àÄ i, _root_.equivalence $ Œª x y : Œ± i, r i (fam.prod.mk x y) :=
begin
  intro i, convert equiv.to_equivalence h i, ext a b,
  split; intro h',
  { apply sat_intro, rintro _ ‚ü® ‚ü©, exact h' },
  { apply sat_elim _ _ h' },
end

lemma exact {r : Pred (Œ≤ ‚®Ø Œ≤)} {f g : Œ± ‚ü∂ Œ≤} (h : f ‚â´ mk r = g ‚â´ mk r) (h' : equiv r) :
  limits.prod.lift f g ‚ä® r :=
begin
  apply sat_intro, intros i x,
  replace h' := equiv.to_equivalence' h',
  suffices : r i (fam.prod.mk (f i x) (g i x)),
  { convert this, ext ‚ü® ‚ü©; refl },
  apply (relation.eqv_gen_iff_of_equivalence (h' i)).1,
  apply quot.exact, replace h := congr_arrow h x, simp [mk] at h, exact h,
end

lemma lift_eq_out (r : Pred (Œ± ‚®Ø Œ±)) (h : equiv r) (f : Œ± ‚ü∂ Œ≤) (h') : lift r f h' = out r ‚â´ f :=
lift_ext _ _
begin
  simp; ext i a, simp [out,mk],
  have : ‚àÄ {i} x y, r i (fam.prod.mk x y) ‚Üí f i x = f i y,
  { intros j, introv hh, specialize h' (value j _ (fam.prod.mk x y)) (sat_intro _ _ _),
    exact value.get _ _ h',
    rintro _ ‚ü® ‚ü©, exact hh },
  replace h := equiv.to_equivalence' h,
  apply this, dsimp [fam.prod.mk],
  apply (relation.eqv_gen_iff_of_equivalence (h i)).1,
  apply _root_.quot.exact,
  rw quot.out_eq, refl,
end

end quot

end fam

universes u' v'

namespace category_theory

namespace functor
open category_theory

/-!
In the following, we treat arrows `f : X ‚ü∂ F.obj Œ±` as collections of objects of type
`Œ± i`, for any `i`. The notion of containment is made formal by the definition of support set:
`supp f i : set (Œ± i)`. Intuitively, `f` contains `a : Œ± i` if, forall `i : I`, `x : X i`,
the `f x` evaluates to an object from which `a` can be retrieved.
-/

namespace fam

variables {I J : Type u} {F G : fam I ‚•§ fam J}

/-- given an arrow `x` to `F.obj Œ±`, does `p` hold for every `Œ±` related to `x`. -/
def liftp {Œ± : fam I} (p : fam.Pred Œ±) {X : fam J} (x : X ‚ü∂ F.obj Œ±) : Prop :=
‚àÉ u : X ‚ü∂ F.obj (fam.subtype p), u ‚â´ F.map fam.subtype.val = x

/-- `liftr r x y` relates `x` and `y` iff `x` and `y` have the same shape and that
we can pair values `a` from `x` and `b` from `y` so that `r a b` holds -/
def liftr {Œ± Œ≤ : fam I} (r : fam.Pred (Œ± ‚®Ø Œ≤)) {X : fam J} (x : X ‚ü∂ F.obj Œ±) (y : X ‚ü∂ F.obj Œ≤) : Prop :=
‚àÉ u : X ‚ü∂ F.obj (fam.subtype r),
  u ‚â´ F.map (fam.subtype.val ‚â´ limits.prod.fst) = x ‚àß
  u ‚â´ F.map (fam.subtype.val ‚â´ limits.prod.snd) = y

/-- `supp x` is the set of values of type `Œ±` that `x` contains -/
def supp {Œ± : fam I} {X : fam J} (x : X ‚ü∂ F.obj Œ±) (Œπ : I) : set (Œ± Œπ) :=
{ y : Œ± Œπ | ‚àÄ ‚¶Ép‚¶Ñ, liftp p x ‚Üí p _ y }

theorem of_mem_supp {Œ± : fam I} {X : fam J} {x : X ‚ü∂ F.obj Œ±} {p : fam.Pred Œ±} (h : liftp p x) :
  ‚àÄ i (y ‚àà supp x i), p _ y :=
Œª i y hy, hy h

lemma liftp_comp {Œ± : fam I} {X : fam J} {p : Œ† i, Œ± i ‚Üí Prop}
  (x : X ‚ü∂ F.obj Œ±) (h : F ‚ü∂ G) :
  liftp p x ‚Üí liftp p (x ‚â´ h.app _)
| ‚ü®u,h'‚ü© := ‚ü®u ‚â´ nat_trans.app h _, by rw ‚Üê h'; simp,‚ü©

lemma liftp_comp' {Œ± : fam I} {X : fam J} {p : Œ† i, Œ± i ‚Üí Prop}
  (x : X ‚ü∂ F.obj Œ±) (T : F ‚ü∂ G) (T' : G ‚ü∂ F)
  (h_inv : ‚àÄ {Œ±}, T.app Œ± ‚â´ T'.app Œ± = ùüô _) :
  liftp p x ‚Üî liftp p (x ‚â´ T.app _) :=
‚ü® liftp_comp x T,
 Œª ‚ü®u,h'‚ü©, ‚ü®u ‚â´ T'.app _,by rw [category.assoc,‚Üê nat_trans.naturality,‚Üê category.assoc,h',category.assoc,h_inv,category.comp_id]‚ü© ‚ü©

lemma liftr_comp {Œ± : fam I} {X : fam J} (p : fam.Pred (Œ± ‚®Ø Œ±)) (x y : X ‚ü∂ F.obj Œ±)
   (T : F ‚ü∂ G) :
  liftr p x y ‚Üí liftr p (x ‚â´ T.app _) (y ‚â´ T.app _)
| ‚ü®u,h,h'‚ü© := ‚ü®u ‚â´ T.app _,
  by { reassoc! h h',
       rw ‚Üê h'; simp only [category.assoc, (nat_trans.naturality _ _).symm,*,eq_self_iff_true, and_self] }‚ü©

end fam

end functor

end category_theory
