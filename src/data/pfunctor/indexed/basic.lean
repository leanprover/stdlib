/-
Copyright (c) 2019 Simon Hudon. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Simon Hudon
-/
import tactic.interactive
import control.family
import control.functor.indexed
import data.sigma

/-!
# Polynomial functors between indexed type families

Indexed polynomial functors are used for defining M-types and W-types.
They map a type family `Œ± : fam J` to the type family
`Œª j, Œ£ a : A j, B j a ‚ü∂ Œ±`, with `A : fam J` and `B : Œ† j, A j ‚Üí fam I`.
They interact well with Lean's inductive definitions because they
guarantee that occurrences of `Œ±` are positive.

## Main definitions

 * `ipfunctor` an indexed polynomial functor
 * `ipfunctor‚ÇÄ` for a specialized case of `ipfunctor`
 * `ipfunctor.apply` the functor structure instance of `ipfunctor`
 * `ipfunctor.Idx` to index the contents of of a `ipfunctor` application
 * `ipfunctor.comp` for functor composition
 * `ipfunctor.drop` and `ipfunctor.last` to decompose a functor
 * `ipfunctor.pf.mk` to turn a value of `ipfunctor.apply` into an arrow

-/

universes v v' u u'

local infixr ` ‚äó `:20 := (‚®Ø)
local infixr ` ‚äó' `:20 := category_theory.limits.prod.map

/-- Polynomial functors between indexed type families -/
structure ipfunctor (I J : Type u) :=
(A : fam J) (B : Œ† j, A j ‚Üí fam I)

instance {I J} : inhabited (ipfunctor I J) := ‚ü® ‚ü® Œª _, default _, Œª _ _ _, default _ ‚ü© ‚ü©

/-- specialized version of `ipfunctor` used for defining simple constructions -/
@[derive inhabited]
def ipfunctor‚ÇÄ (I : Type u) := ipfunctor I I

namespace ipfunctor

variables {I J : Type u} {Œ± Œ≤ : Type u}

section pfunc
variables (P : ipfunctor I J)

/-- polynomial functor `P` as a functor -/
def apply : fam I ‚•§ fam J :=
{ obj := Œª X i, Œ£ a : P.A i, P.B i a ‚ü∂ X,
  map := Œª X Y f i ‚ü®a,g‚ü©, ‚ü®a, g ‚â´ f‚ü© }

/-- Applying `P` to an object of `fam I` -/
def obj : fam I ‚Üí fam J := P.apply.obj

/-- map function for polynomial functor `P` -/
def map {X Y : fam I} (f : X ‚ü∂ Y) : P.obj X ‚ü∂ P.obj Y := P.apply.map f

lemma map_id {X : fam I} : P.map (ùüô X) = ùüô _ :=
category_theory.functor.map_id _ _

@[reassoc]
lemma map_comp {X Y Z : fam I} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : P.map (f ‚â´ g) = P.map f ‚â´ P.map g :=
category_theory.functor.map_comp _ _ _

@[simp, reassoc]
lemma map_comp_map {X Y Z : fam I} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : P.map f ‚â´ P.map g = P.map (f ‚â´ g) :=
(category_theory.functor.map_comp _ _ _).symm

@[simp]
lemma apply_map {X Y : fam I} (f : X ‚ü∂ Y) : P.apply.map f = P.map f := rfl

theorem map_eq' {Œ± Œ≤ : fam I} (f : Œ± ‚ü∂ Œ≤) {j : J} (a : P.A j) (g : P.B j a ‚ü∂ Œ±) :
  P.map f _ ‚ü®a, g‚ü© = ‚ü®a, g ‚â´ f‚ü© :=
rfl

open fam set category_theory.functor

@[simp, reassoc]
theorem map_eq {Œ± Œ≤ : fam I} (f : Œ± ‚ü∂ Œ≤) {j : J} (a : P.A j) (g : P.B j a ‚ü∂ Œ±) :
  value j (P.obj _) ‚ü®a, g‚ü© ‚â´ P.map f = value j (P.obj _) ‚ü®a, g ‚â´ f‚ü© :=
by ext _ ‚ü® ‚ü© : 2; simp [map_eq']

/-- `Idx` identifies a location inside the application of an ipfunctor.
For `P : ipfunctor`, `x : P.obj Œ±` and `i : P.Idx`, `i` can designate
one part of `x` or is invalid, if `i.1 ‚â† x.1` -/
def Idx (j : J) := Œ£ (x : P.A j) i, P.B j x i

instance Idx.inhabited {i} [inhabited (P.A i)] [inhabited I] [inhabited $ P.B i (default (P.A i)) (default I)] :
  inhabited (Idx P i) := ‚ü® ‚ü®default _,default _,default _‚ü© ‚ü©

/-- Type index of the `A` component referenced by index `x` -/
def Idx.idx {P : ipfunctor I J} {j : J} (x : Idx P j) : I := x.2.1

/-- Lookup the part of `x` designed by index `j` or return an arbitrary value -/
def obj.iget {i} [decidable_eq $ P.A i] {Œ± : fam I} (x : P.obj Œ± i) (k : P.Idx i) [inhabited $ Œ± k.idx] : Œ± k.idx :=
if h : k.1 = x.1
  then x.2 _ (cast (by rw [Idx.idx,‚Üê h]) $ k.2.2)
  else default _

end pfunc

end ipfunctor

/-!
Composition of polynomial functors.
-/

namespace ipfunctor

variables {I J K : Type u} (P‚ÇÇ : ipfunctor.{u} J K) (P‚ÇÅ : ipfunctor.{u} I J)

/-- Composition of polynomial functors. -/
def comp : ipfunctor.{u} I K :=
‚ü® Œª i, Œ£ a‚ÇÇ : P‚ÇÇ.1 i, P‚ÇÇ.2 _ a‚ÇÇ ‚ü∂ P‚ÇÅ.1,
  Œª k a‚ÇÇa‚ÇÅ i, Œ£ j (u : P‚ÇÇ.2 _ a‚ÇÇa‚ÇÅ.1 j), P‚ÇÅ.2 _ (a‚ÇÇa‚ÇÅ.2 _ u) i ‚ü©

/-- Contructor for polynomial functor composition -/
def comp.mk : Œ† (Œ± : fam I), P‚ÇÇ.obj (P‚ÇÅ.obj Œ±) ‚ü∂ (comp P‚ÇÇ P‚ÇÅ).obj Œ± :=
Œª Œ± k x, ‚ü® ‚ü®x.1,x.2 ‚â´ Œª j, sigma.fst‚ü©, Œª i a‚ÇÇa‚ÇÅ, (x.2 _ _).2 _ a‚ÇÇa‚ÇÅ.2.2 ‚ü©

/-- Destructor for polynomial functor composition -/
def comp.get : Œ† (Œ± : fam I), (comp P‚ÇÇ P‚ÇÅ).obj Œ± ‚ü∂ P‚ÇÇ.obj (P‚ÇÅ.obj Œ±) :=
Œª Œ± k x, ‚ü® x.1.1, Œª j a‚ÇÇ, ‚ü®x.1.2 _ a‚ÇÇ, Œª i a‚ÇÅ, x.2 _ ‚ü®j, a‚ÇÇ, a‚ÇÅ‚ü©‚ü© ‚ü©

@[simp, reassoc]
lemma comp.mk_get : Œ† (Œ± : fam I), comp.mk P‚ÇÇ P‚ÇÅ Œ± ‚â´ comp.get P‚ÇÇ P‚ÇÅ Œ± = ùüô _ :=
Œª Œ±, funext $ Œª k, funext $ Œª ‚ü®x,y‚ü©, congr_arg (sigma.mk x) (by ext : 3; intros; refl)

@[simp, reassoc]
lemma comp.get_mk : Œ† (Œ± : fam I), comp.get P‚ÇÇ P‚ÇÅ Œ± ‚â´ comp.mk P‚ÇÇ P‚ÇÅ Œ± = ùüô _ :=
Œª Œ±, funext $ Œª k, funext $ Œª ‚ü®‚ü®a,c‚ü©,b‚ü©, congr_arg (sigma.mk _) $ by ext _ ‚ü®a,b,c‚ü©; refl

instance get.category_theory.is_iso {Œ± : fam I} : category_theory.is_iso (comp.get P‚ÇÇ P‚ÇÅ Œ±) :=
{ inv := comp.mk P‚ÇÇ P‚ÇÅ Œ± }

instance mk.category_theory.is_iso {Œ± : fam I} : category_theory.is_iso (comp.mk P‚ÇÇ P‚ÇÅ Œ±) :=
{ inv := comp.get P‚ÇÇ P‚ÇÅ Œ± }

@[simp, reassoc]
lemma comp.map_get : Œ† {Œ± Œ≤ : fam I} (f : Œ± ‚ü∂ Œ≤), (comp P‚ÇÇ P‚ÇÅ).map f ‚â´ comp.get P‚ÇÇ P‚ÇÅ Œ≤ = comp.get P‚ÇÇ P‚ÇÅ Œ± ‚â´ map _ (map _ f) :=
by { intros, ext _ ‚ü®a,b‚ü©; intros; refl }

@[simp, reassoc]
lemma comp.map_mk : Œ† {Œ± Œ≤ : fam I} (f : Œ± ‚ü∂ Œ≤), map _ (map _ f) ‚â´ comp.mk P‚ÇÇ P‚ÇÅ Œ≤ = comp.mk P‚ÇÇ P‚ÇÅ Œ± ‚â´ (comp P‚ÇÇ P‚ÇÅ).map f :=
Œª Œ± Œ≤ f,
@category_theory.mono.right_cancellation _ _ _ _ (comp.get P‚ÇÇ P‚ÇÅ Œ≤) _ _ _ _ (by simp)

end ipfunctor

/-
Lifting predicates and relations.
-/

namespace ipfunctor
variables {I J : Type u} {P : ipfunctor.{u} I J}
open category_theory.functor.fam
open fam set category_theory.functor

/-- Eliminator for polynomial functor -/
@[elab_as_eliminator]
def obj_cases
   {Œ± : fam I} {j} {C : (unit j ‚ü∂ P.obj Œ±) ‚Üí Sort*}
   (h : ‚àÄ a f, C $ value _ _ ‚ü®a,f‚ü©)
   (x : unit j ‚ü∂ P.obj Œ±) : C x :=
begin
  rcases h' : x _ unit.rfl with ‚ü®a,f‚ü©,
  have : value _ _ (x _ unit.rfl) = x,
  { ext _ ‚ü® ‚ü© : 2, refl },
  rw h' at this, specialize h a f,
  simpa [this] using h
end

theorem liftp_iff {Œ± : fam I} (p : Œ† ‚¶Éi‚¶Ñ , Œ± i ‚Üí Prop) {j} (x : unit j ‚ü∂ P.obj Œ±) :
  fam.liftp p x ‚Üî ‚àÉ a f, x = value _ _ ‚ü®a, f‚ü© ‚àß ‚àÄ (i : I) y, p (@f i y) :=
begin
  split,
  { rintros ‚ü®y, hy‚ü©, revert y, refine obj_cases _, intros a f hy,
    rw [‚Üê ipfunctor.map, map_eq P] at hy,
    use [a, f ‚â´ fam.subtype.val, hy.symm],
    intros, apply (f _ y).property },
  rintros ‚ü®a, f, xeq, pf‚ü©,
  let g : unit j ‚ü∂ P.obj (subtype p),
  { rintros _ ‚ü® ‚ü©, refine ‚ü®a, Œª i b, ‚ü®f _ b, pf _ _‚ü©‚ü©, },
  refine ‚ü®g, _‚ü©,
  ext _ ‚ü® ‚ü© : 2, rw xeq, refl,
end

theorem liftp_iff' {Œ± : fam I} (p : Œ† ‚¶Éi‚¶Ñ , Œ± i ‚Üí Prop) {i} (a : P.A i) (f : P.B i a ‚ü∂ Œ±) :
  @fam.liftp.{u} _ _ P.apply _ p _ (value _ _ ‚ü®a,f‚ü©) ‚Üî ‚àÄ i x, p (@f i x) :=
begin
  simp only [liftp_iff, sigma.mk.inj_iff]; split; intro,
  { casesm* [Exists _, _ ‚àß _],
    replace a_1_h_h_left := congr_fun (congr_fun a_1_h_h_left i) unit.rfl,
    dsimp [value] at a_1_h_h_left, cases a_1_h_h_left, assumption },
  repeat { constructor <|> assumption }
end

theorem liftr_iff {Œ± : fam I} (r : Pred (Œ± ‚äó Œ±)) {j} (x y : unit j ‚ü∂ P.obj Œ±) :
  fam.liftr r x y ‚Üî ‚àÉ a f‚ÇÄ f‚ÇÅ, x = value _ _ ‚ü®a, f‚ÇÄ‚ü© ‚àß y = value _ _ ‚ü®a, f‚ÇÅ‚ü© ‚àß ‚àÄ i j, r _ (fam.prod.mk (@f‚ÇÄ i j) (@f‚ÇÅ i j)) :=
begin
  split,
  { rintros ‚ü®u, xeq, yeq‚ü©,
    revert u, refine obj_cases _, intros a f xeq yeq,
    rw [‚Üê ipfunctor.map, map_eq] at xeq yeq,
    use [a,f ‚â´ fam.subtype.val ‚â´ fam.prod.fst,f ‚â´ fam.subtype.val ‚â´ fam.prod.snd, xeq.symm, yeq.symm],
    intros, convert (f _ j_1).property, ext ‚ü® ‚ü©; refl },
  rintros ‚ü®a, f‚ÇÄ, f‚ÇÅ, xeq, yeq, h‚ü©,
  let g : unit j ‚ü∂ P.obj (subtype r),
  { rintros _ ‚ü® ‚ü©, refine ‚ü®a, Œª i b, ‚ü®fam.prod.mk (f‚ÇÄ _ b) (f‚ÇÅ _ b), h _ _‚ü©‚ü©, },
  refine ‚ü®g, _‚ü©,
  split; ext _ ‚ü® ‚ü© : 2,
  { rw xeq, refl },
  { rw yeq, refl },
end

theorem liftp_iff‚ÇÄ {Œ± : fam I} {X : fam J} (p : fam.Pred Œ±) (x : X ‚ü∂ P.obj Œ±) :
  liftp p x ‚Üî ‚àÄ j (y : X j), ‚àÉ a f, x _ y = ‚ü®a, f‚ü© ‚àß ‚àÄ i a, p i (f _ a) :=
begin
  split,
  { rintros ‚ü®y, hy‚ü© j z, cases h : y _ z with a f,
    refine ‚ü®a, Œª i a, subtype.val (f _ a), _, Œª i a, subtype.property (f _ a)‚ü©, --, Œª i, (f i).property‚ü©,
    fold ipfunctor.map ipfunctor.obj at *,
    -- rw [‚Üê ipfunctor.map, ‚Üê ipfunctor.obj] at h,
    simp [hy.symm, (‚â´), h, map_eq'],
    simp [(‚àò),fam.subtype.val], },
  introv hv, dsimp [liftp],
  choose a f hv using hv,
  let F‚ÇÄ := Œª j k, a j k,
  let F‚ÇÅ : Œ† j k, P.B j (F‚ÇÄ j k) ‚ü∂ Œ± := Œª j k, f j k,
  have F‚ÇÇ : ‚àÄ j k, x _ k = ‚ü®F‚ÇÄ j k,F‚ÇÅ j k‚ü© := Œª j k, (hv j k).1,
  have F‚ÇÉ : ‚àÄ j k i a, p i (F‚ÇÅ j k _ a) := Œª j k, (hv j k).2,
  refine ‚ü®Œª j x, ‚ü®F‚ÇÄ j x,Œª i y, ‚ü®F‚ÇÅ j x _ y,F‚ÇÉ j x i y‚ü©‚ü©,_‚ü©,
  ext : 2, rw F‚ÇÇ, refl
end

open category_theory

theorem liftr_iff‚ÇÄ {Œ± Œ≤ : fam I} (r : fam.Pred (Œ± ‚äó Œ≤)) {X : fam J} (x : X ‚ü∂ P.obj Œ±) {y} :
  liftr r x y ‚Üî ‚àÄ j (z : X j), ‚àÉ a f‚ÇÄ f‚ÇÅ, x _ z = ‚ü®a, f‚ÇÄ‚ü© ‚àß y _ z = ‚ü®a, f‚ÇÅ‚ü© ‚àß ‚àÄ i a, r i (fam.prod.mk (f‚ÇÄ _ a) (f‚ÇÅ _ a)) :=
begin
  split,
  { rintros ‚ü®u, xeq, yeq‚ü© j z, cases h : u _ z with a f,
    -- use a, have := Œª i (b : P.B j a i), (f b).val,
    use [a, f ‚â´ fam.subtype.val ‚â´ limits.prod.fst, f ‚â´ fam.subtype.val ‚â´ limits.prod.snd],
    split, { simp only [‚Üê xeq, pi.comp_apply, types_comp_apply, h, map_eq', apply_map], },
    split, { simp only [‚Üê yeq, pi.comp_apply, types_comp_apply, h, map_eq', apply_map], },
    intros i a, convert (f _ a).property, simp only [pi.comp_apply, types_comp_apply],
    rw [‚Üê fam.prod.fst, ‚Üê fam.prod.snd, fam.prod.mk_fst_snd], refl },
  rintros hv, dsimp [liftr],
  choose a f‚ÇÄ f‚ÇÅ hv using hv,
  let F‚ÇÄ := Œª j k, a j k,
  let F‚ÇÅ : Œ† j k, P.B j (F‚ÇÄ j k) ‚ü∂ Œ± := Œª j k, f‚ÇÄ j k,
  let F‚ÇÇ : Œ† j k, P.B j (F‚ÇÄ j k) ‚ü∂ Œ≤ := Œª j k, f‚ÇÅ j k,
  have F‚ÇÉ : ‚àÄ j k, x _ k = ‚ü®F‚ÇÄ j k,F‚ÇÅ j k‚ü© := Œª j k, (hv j k).1,
  have F‚ÇÑ : ‚àÄ j k, y _ k = ‚ü®F‚ÇÄ j k,F‚ÇÇ j k‚ü© := Œª j k, (hv j k).2.1,
  have F‚ÇÖ : ‚àÄ j k i a, r i (fam.prod.mk (F‚ÇÅ j k _ a) (F‚ÇÇ j k _ a)) := Œª j k, (hv j k).2.2,
  refine ‚ü®Œª j x, ‚ü®F‚ÇÄ j x,Œª i y, _‚ü©,_‚ü©,
  { refine ‚ü®(fam.prod.mk (F‚ÇÅ j x _ y) (F‚ÇÇ j x _ y)), F‚ÇÖ _ _ _ _‚ü© },
  split; ext : 2; [rw F‚ÇÉ,rw F‚ÇÑ]; refl,
end

theorem supp_eq {Œ± : fam I} (j i) (a : P.A j) (f : P.B j a ‚ü∂ Œ±) :
  @fam.supp.{u} _ _ P.apply _ _  (value _ _ ‚ü®a,f‚ü©) i = @f _ '' univ :=
begin
  ext, simp only [fam.supp, image_univ, mem_range, mem_set_of_eq],
  split; intro h,
  { apply @h (Œª i x, ‚àÉ (y : P.B j a i), f _ y = x),
    rw liftp_iff', intros, refine ‚ü®_,rfl‚ü© },
  { simp only [liftp_iff'], cases h, subst x,
    tauto }
end

end ipfunctor

/-!
Decomposing an ipfunctor on product of type families.

The terminology, `drop` and `last` is purposefully asymmetric to
hint at the fact that type families and intended to be built
out of an iteration of products. For instance, `fam (((pempty ‚äï I) ‚äï J) ‚äï K)` is
intended to encode a vector of type families `[fam I, fam J, fam K]` and gives easy
access to the last object.
-/

namespace ipfunctor
variables {I J : Type u} (P : ipfunctor.{u} (J‚äïI) I)

/-- Take a functor from the left component of the source type family of `P`
to the target type family of `P` -/
def drop : ipfunctor J I :=
{ A := P.A, B := Œª i a, (P.B i a).drop }

/-- Take a functor from the right component of the source type family of `P`
to the target type family of `P` -/
def last : ipfunctor‚ÇÄ I :=
{ A := P.A, B := Œª i a, (P.B i a).last }

/-- Helper definition for reasoning about the construction by parts of
a polynomial functor -/
@[reducible] def append_contents {Œ± : fam J} {Œ≤ : fam I}
    {i} {a : P.A i} (f' : P.drop.B i a ‚ü∂ Œ±) (f : P.last.B i a ‚ü∂ Œ≤) :
  P.B i a ‚ü∂ Œ±.append1 Œ≤ :=
fam.split_fun f' f

variables {j : I} {a a' : P.A j} {Œ± Œ±' : fam J} {Œ≤ Œ≤' : fam I}
  (f‚ÇÄ : P.drop.B j a ‚ü∂ Œ±) (f‚ÇÅ : Œ± ‚ü∂ Œ±')
  (g‚ÇÄ : P.last.B j a ‚ü∂ Œ≤) (g‚ÇÅ : Œ≤ ‚ü∂ Œ≤')

lemma append_contents_comp :
  append_contents _ (f‚ÇÄ ‚â´ f‚ÇÅ) (g‚ÇÄ ‚â´ g‚ÇÅ) = append_contents _ f‚ÇÄ g‚ÇÄ ‚â´ fam.split_fun f‚ÇÅ g‚ÇÅ :=
by rw [append_contents,append_contents,‚Üê fam.split_fun_comp]

end ipfunctor

namespace ipfunctor
variables {I J : Type u} (P : ipfunctor.{u} I J)

/-- Shorthand for creating an arrow from a value. The type is more
specific than necessary but helps with elaboration -/
def pf.mk {Œ±} (i) (x : P.obj Œ± i) : fam.unit i ‚ü∂ P.obj Œ± :=
fam.value _ _ x

@[reassoc]
lemma pf.mk_map_eq {Œ± Œ≤} (i) (a : P.A i) (f : P.B i a ‚ü∂ Œ±) (g : Œ± ‚ü∂ Œ≤) :
  pf.mk P i ‚ü®a,f‚ü© ‚â´ P.map g = pf.mk P i ‚ü®a,f ‚â´ g‚ü© :=
ipfunctor.map_eq _ _ _ _

end ipfunctor
