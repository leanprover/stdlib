
/-
Copyright (c) 2018 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Jeremy Avigad, Simon Hudon
-/

import data.qpf.indexed.basic

/-!
# The quotients of QPFs is itself a QPF
The quotients are here defined using a surjective function and
its right inverse. They are very similar to the `abs` and `repr`
functions found in the definition of `iqpf`
-/

universes u

namespace iqpf

variables {I J : Type u}
variables {F : fam I ‚•§ fam J}

section repr

variables [q : iqpf F]
variables {G : fam I ‚•§ fam J}
variable  {FG_abs  : F ‚ü∂ G}
variable  {FG_repr : Œ† Œ±, G.obj Œ± ‚ü∂ F.obj Œ±}

/-- If `F` is a QPF then `G` is a QPF as well. Can be used to
construct `iqpf` instances by transporting them across a
natural transformations -/
def quotient_qpf
    (FG_abs_repr : Œ† Œ±, FG_repr Œ± ‚â´ FG_abs.app Œ± = ùüô _) : iqpf G :=
{ P := q.P,
  abs := Œª Œ±, abs F Œ± ‚â´ FG_abs.app _,
  repr := Œª Œ±, FG_repr Œ± ‚â´ repr F Œ±,
  abs_repr := Œª Œ±, by simp [abs_repr,FG_abs_repr],
  abs_map := Œª Œ± Œ≤ f, by simp [abs_map_assoc] }

end repr

section rel

open fam category_theory

variables (R : ‚àÄ Œ±, Pred (F.obj Œ± ‚äó F.obj Œ±))

/-- Functorial quotient type -/
def quot1_obj (Œ± : fam I) : fam J :=
quot (R Œ±)

variables [q : iqpf F]
variables (Hfunc : ‚àÄ ‚¶ÉX Œ± Œ≤‚¶Ñ (x : X ‚ü∂ F.obj Œ± ‚äó F.obj Œ±) (f : Œ± ‚ü∂ Œ≤),
  x ‚ä® R Œ± ‚Üí x ‚â´ (F.map f ‚äó F.map f) ‚ä® R Œ≤)

include Hfunc

/-- `map` of the `quot1` functor -/
def quot1_map ‚¶ÉŒ± Œ≤‚¶Ñ (f : Œ± ‚ü∂ Œ≤) : quot1_obj.{u} R Œ± ‚ü∂ quot1_obj.{u} R Œ≤ :=
fam.quot.lift _ (F.map f ‚â´ fam.quot.mk _) $
begin
  intros i a h‚ÇÄ,
  refine fam.quot.sound'' (a ‚â´ fam.prod.fst ‚â´ F.map f) (a ‚â´ fam.prod.snd ‚â´ F.map f) _ _ _,
  { simp only [diag_map_comp, diag_map_fst_snd_comp, Hfunc, h‚ÇÄ], },
  { simp only [category.assoc] },
  { simp only [category.assoc] },
end

/-- `quot1` is a functor if `R` is well-behaved (i.e. `Hfunc`) -/
@[simps]
def quot1 : fam I ‚•§ fam J :=
{ obj := quot1_obj R,
  map := quot1_map R Hfunc,
  map_id' :=
    by intros; apply quot.lift_ext;
       simp only [quot1_map, quot.mk_lift_, category.id_comp, category_theory.functor.map_id];
       erw category_theory.category.comp_id,
  map_comp' :=
    by intros; apply quot.lift_ext;
       simp only [quot1_map, quot.lift_comp, quot.mk_lift_, category.assoc, functor.map_comp]
  }

/-- Natural transformation taking the quotient of `F` by `R` -/
@[simps]
def quot1.MK : F ‚ü∂ quot1 R Hfunc :=
{ app := Œª X, fam.quot.mk _,
  naturality' := by intros; simp [quot1_map] }

/-- `quot1` is a qpf -/
noncomputable def rel_quot : iqpf (quot1 R Hfunc)  :=
@quotient_qpf _ _ F q (quot1 R Hfunc) (quot1.MK _ Hfunc) (Œª x, fam.quot.out _)
  (by intros; simp; refl)

end rel

end iqpf
