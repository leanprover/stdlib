/-
Copyright (c) 2018 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Jeremy Avigad

The initial algebra of a multivariate qpf is again a qpf.
-/
import data.pfunctor.indexed.W
import data.qpf.indexed.basic
universes u v

open category_theory.functor.fam (liftp liftr) fam category_theory
open category_theory.functor

namespace iqpf

variables {I J : Type u} {F : fam (I ‚äï J) ‚•§ fam J} [q : iqpf F] {Œ± : fam I} {Œ≤ : fam J}
include q

/-- does recursion on `q.P.W` using `g : F Œ± ‚Üí Œ±` rather than `g : P Œ± ‚Üí Œ±` -/
def recF (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤) : q.P.W Œ± ‚ü∂ Œ≤ :=
q.P.W_ind (Œª j a f' f rec,
  g (abs _ _ ‚ü®a,fam.split_fun f' rec‚ü©))

theorem recF_eq (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤)
    {i} (a : q.P.A i) (f' : q.P.drop.B i a ‚ü∂ Œ±) (f : q.P.last.B i a ‚ü∂ q.P.W Œ±) :
  recF g (q.P.W_mk a f' f) =  g (abs _ _ ‚ü®a, fam.split_fun f' (f ‚â´ recF g)‚ü©) :=
by simp only [recF]; rw [ipfunctor.W_ind_eq]; refl

open category_theory.functor.fam

theorem recF_eq' (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤) :
  recF g = q.P.W_dest' ‚â´ q.P.map (fam.append_fun (ùüô _) (recF g)) ‚â´ abs _ _ ‚â´ g :=
begin
  ext i x : 2,
  apply q.P.W_cases _ _ x,
  intros j a f' f, erw [recF_eq], apply congr_arg (@g _),
  erw [ipfunctor.map_eq',append_fun_comp_split_fun], congr,
  ext : 2, dsimp, rw ipfunctor.W_path_dest_right_W_path_cases_on, cases f x_2; refl,
end

/--
The equivalence on W-types based on the equality of the abstraction function
of the QPF
-/
inductive Wequiv : Œ† {i}, q.P.W Œ± i ‚Üí q.P.W Œ± i ‚Üí Prop
| ind {i} (a : q.P.A i) (f' : q.P.drop.B i a ‚ü∂ Œ±) (f‚ÇÄ f‚ÇÅ : q.P.last.B i a ‚ü∂ q.P.W Œ±) :
    (‚àÄ j (x : q.P.last.B i a j), Wequiv ((f‚ÇÄ : Œ† j, q.P.last.B i a j ‚Üí q.P.W Œ± j) x) (f‚ÇÅ x)) ‚Üí Wequiv (q.P.W_mk a f' f‚ÇÄ) (q.P.W_mk a f' f‚ÇÅ)
| abs {i} (a‚ÇÄ : q.P.A i) (f'‚ÇÄ : q.P.drop.B i a‚ÇÄ ‚ü∂ Œ±) (f‚ÇÄ : q.P.last.B i a‚ÇÄ ‚ü∂ q.P.W Œ±)
          (a‚ÇÅ : q.P.A i) (f'‚ÇÅ : q.P.drop.B i a‚ÇÅ ‚ü∂ Œ±) (f‚ÇÅ : q.P.last.B i a‚ÇÅ ‚ü∂ q.P.W Œ±) :
      abs _ _ ‚ü®a‚ÇÄ, q.P.append_contents f'‚ÇÄ f‚ÇÄ‚ü© = abs _ _ ‚ü®a‚ÇÅ, q.P.append_contents f'‚ÇÅ f‚ÇÅ‚ü© ‚Üí
        Wequiv (q.P.W_mk a‚ÇÄ f'‚ÇÄ f‚ÇÄ) (q.P.W_mk a‚ÇÅ f'‚ÇÅ f‚ÇÅ)
| trans {i} (u v w : q.P.W Œ± i) : Wequiv u v ‚Üí Wequiv v w ‚Üí Wequiv u w

open fam

theorem recF_eq_of_Wequiv (Œ± : fam I) {Œ≤ : fam J} (u : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤)
    ‚¶Éi‚¶Ñ (x y : q.P.W Œ± i) :
  Wequiv x y ‚Üí recF u x = recF u y :=
begin
  revert i x, refine q.P.W_cases _ ,
  intros i a‚ÇÄ f'‚ÇÄ f‚ÇÄ y,
  revert i y, refine q.P.W_cases _,
  intros i a‚ÇÅ f'‚ÇÅ f‚ÇÅ, introv,
  intro h, induction h,
  case iqpf.Wequiv.ind : j a f' f‚ÇÄ f‚ÇÅ h ih
  { have : f‚ÇÄ ‚â´ recF u = f‚ÇÅ ‚â´ recF u, { ext : 2, simp only [ih, ipfunctor.then_def] },
    simp only [recF_eq, this, ih, fam.split_fun_comp] },
  case iqpf.Wequiv.abs : j a‚ÇÄ f'‚ÇÄ f‚ÇÄ a‚ÇÅ f'‚ÇÅ f‚ÇÅ h
    { rw [recF_eq'], simp only [abs_map_assoc, ipfunctor.W_dest'_W_mk, h, ipfunctor.then_def] },
  case iqpf.Wequiv.trans : i x y z e‚ÇÅ e‚ÇÇ ih‚ÇÅ ih‚ÇÇ
    { exact eq.trans ih‚ÇÅ ih‚ÇÇ }
end

theorem Wequiv.abs' ‚¶Éi‚¶Ñ (x y : q.P.W Œ± i)
    (h : abs _ _ (q.P.W_dest' x) = abs _ _ (q.P.W_dest' y)) :
  Wequiv x y :=
begin
  revert i x h, refine q.P.W_cases _,
  intros i a‚ÇÄ f'‚ÇÄ f‚ÇÄ y,
  revert i y, refine q.P.W_cases _,
  intros i a‚ÇÅ f'‚ÇÅ f‚ÇÅ, introv,
  apply Wequiv.abs
end

theorem Wequiv.refl ‚¶Éi‚¶Ñ (x : q.P.W Œ± i) : Wequiv x x :=
by apply q.P.W_cases _ _ x; intros i a f' f; exact Wequiv.abs a f' f a f' f rfl

theorem Wequiv.symm ‚¶Éi‚¶Ñ (x y : q.P.W Œ± i) : Wequiv x y ‚Üí Wequiv y x :=
begin
  intro h, induction h,
  case iqpf.Wequiv.ind : i a f' f‚ÇÄ f‚ÇÅ h ih
    { exact Wequiv.ind _ _ _ _ ih },
  case iqpf.Wequiv.abs : i a‚ÇÄ f'‚ÇÄ f‚ÇÄ a‚ÇÅ f'‚ÇÅ f‚ÇÅ h
    { exact Wequiv.abs _ _ _ _ _ _ h.symm },
  case iqpf.Wequiv.trans : i x y z e‚ÇÅ e‚ÇÇ ih‚ÇÅ ih‚ÇÇ
    { exact iqpf.Wequiv.trans _ _ _ ih‚ÇÇ ih‚ÇÅ}
end

/-- maps every element of the W type to a canonical representative -/
def Wrepr : q.P.W Œ± ‚ü∂ q.P.W Œ± := recF (repr _ _ ‚â´ q.P.W_mk')

theorem Wrepr_W_mk  ‚¶Éi‚¶Ñ
    (a : q.P.A i) (f' : q.P.drop.B i a ‚ü∂ Œ±) (f : q.P.last.B i a ‚ü∂ q.P.W Œ±) :
  Wrepr (q.P.W_mk a f' f) =
    q.P.W_mk' (repr _ _ (abs _ _ (q.P.map (fam.append_fun (ùüô _) Wrepr) ‚ü®a, q.P.append_contents f' f‚ü©))) :=
by simp only [Wrepr, recF_eq, split_fun_comp_right, ipfunctor.then_def]; refl

theorem Wrepr_equiv ‚¶Éi‚¶Ñ (x : q.P.W Œ± i) : Wequiv (Wrepr x) x :=
begin
  apply q.P.W_ind _ _ x, intros i a f' f ih,
  apply Wequiv.trans _ (q.P.W_mk a f' (f ‚â´ Wrepr)),
  { apply Wequiv.abs',
    rw [Wrepr_W_mk, q.P.W_dest'_W_mk, q.P.W_dest'_W_mk'', abs_repr', ipfunctor.map_eq'],
    congr, erw [‚Üê split_fun_comp,category.comp_id], },
  apply Wequiv.ind, exact ih
end

theorem Wequiv_map {Œ± Œ≤ : fam I} (g : Œ± ‚ü∂ Œ≤) ‚¶Éi‚¶Ñ (x y : q.P.W Œ± i) :
  Wequiv x y ‚Üí Wequiv (q.P.W_map g x) (q.P.W_map g y) :=
begin
  intro h, induction h,
  case iqpf.Wequiv.ind : i a f' f‚ÇÄ f‚ÇÅ h ih
    { erw [q.P.W_map_W_mk, q.P.W_map_W_mk], apply Wequiv.ind, apply ih },
  case iqpf.Wequiv.abs : j a‚ÇÄ f'‚ÇÄ f‚ÇÄ a‚ÇÅ f'‚ÇÅ f‚ÇÅ h
    { rw [q.P.W_map_W_mk, q.P.W_map_W_mk], apply Wequiv.abs,
      rw [ipfunctor.append_contents_comp, ipfunctor.append_contents_comp, ‚Üê ipfunctor.map_eq', ‚Üê ipfunctor.map_eq', abs_map', abs_map', h]},
  case iqpf.Wequiv.trans : i x y z e‚ÇÅ e‚ÇÇ ih‚ÇÅ ih‚ÇÇ
    { apply iqpf.Wequiv.trans, apply ih‚ÇÅ, apply ih‚ÇÇ }
end

/-
Define the fixed point as the quotient of trees under the equivalence relation.
-/

/-- setoid based on Wequiv -/
def W_setoid (Œ± : fam I) (i) : setoid (q.P.W Œ± i) :=
‚ü®Wequiv, @Wequiv.refl _ _ _ _ _ _, @Wequiv.symm _ _ _ _ _ _, @Wequiv.trans _ _ _ _ _ _‚ü©

local attribute [instance] W_setoid

/-- least fixed point of a QPF -/
def fix (F : fam (I‚äïJ) ‚•§ fam J) [q : iqpf F] (Œ± : fam I) : fam J
| i := quotient (W_setoid Œ± i : setoid (q.P.W Œ± i))

/-- map of the least fixed point of a QPF -/
def fix.map {Œ± Œ≤ : fam I} : Œ† (g : Œ± ‚ü∂ Œ≤), fix F Œ± ‚ü∂ fix F Œ≤
| g i :=
quotient.lift (Œª x : q.P.W Œ± i, ‚ü¶q.P.W_map g x‚üß)
  (Œª a b h, quot.sound (Wequiv_map _ _ _ h))

section

variable (F)

/-- The least fixed point of a QPF is a functor -/
def pFix : fam I ‚•§ fam J :=
{ obj := fix F,
  map := Œª X Y f, fix.map f }

end

/--  -/
def fix.lift (f : q.P.W Œ± ‚ü∂ Œ≤) (h : ‚àÄ {i} a b : q.P.W Œ± i, Wequiv a b ‚Üí f a = f b) : (fix F Œ± ‚ü∂ Œ≤) :=
Œª i x, quot.lift (@f i) h x

/-- Recursor for `fix F Œ±` -/
def fix.rec (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤) : fix F Œ± ‚ü∂ Œ≤ :=
fix.lift (recF g) (recF_eq_of_Wequiv Œ± g)

/-- Destruct a `fix F Œ±` into its underlying W-type -/
def fix.quot.dest : fix F Œ± ‚ü∂ q.P.W Œ± :=
fix.lift Wrepr (recF_eq_of_Wequiv Œ± (Œª i x, q.P.W_mk' (repr _ _ x)))

/-- Construct a `fix F Œ±` from its underlying W-type -/
def fix.quot.mk : q.P.W Œ± ‚ü∂ fix F Œ± :=
Œª i (x : q.P.W Œ± i), quot.mk _ x

@[simp, reassoc]
lemma fix.quot.mk_lift {Œ≥ : fam J} (g : q.P.W Œ± ‚ü∂ Œ≥)
      (h : ‚àÄ ‚¶Éi : J‚¶Ñ (a b : ipfunctor.W (P F) Œ± i), Wequiv a b ‚Üí g a = g b) :
  fix.quot.mk ‚â´ fix.lift g h = g :=
by ext; simp only [fix.lift, fix.quot.mk, ipfunctor.then_def]

/-- Constructor for `fix F Œ±` -/
def fix.mk : F.obj (Œ±.append1 (fix F Œ±)) ‚ü∂ fix F Œ± :=
repr _ _ ‚â´ q.P.map (fam.append_fun (ùüô _) fix.quot.dest) ‚â´ q.P.W_mk' ‚â´ fix.quot.mk

/-- Destructor for `fix F Œ±` -/
def fix.dest : fix F Œ± ‚ü∂ F.obj (Œ±.append1 (fix F Œ±)) :=
fix.rec (F.map $ fam.append_fun (ùüô _) fix.mk)

lemma fix_to_W_recF (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤) : fix.quot.dest ‚â´ recF g = fix.rec g :=
by { ext i a : 2, apply quotient.induction_on a, intro x,
     apply recF_eq_of_Wequiv, apply Wrepr_equiv }

@[reassoc]
theorem fix.rec_eq (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤) : -- ‚¶Éi‚¶Ñ (x : F.obj (Œ±.append1 (fix F Œ±)) i) :
  fix.mk ‚â´ fix.rec g = F.map (fam.append_fun (ùüô _) (fix.rec g)) ‚â´ g :=
begin
  conv { to_lhs, rw [fix.rec,fix.mk] }, simp only [fix.quot.mk_lift, category.assoc],
  rw [recF_eq', abs_map_assoc, ipfunctor.W_dest'_W_mk'_assoc, abs_map_assoc, abs_repr_assoc,
        ‚Üê category_theory.functor.map_comp_assoc,‚Üê append_fun_comp, category.id_comp, fix_to_W_recF],
end

theorem fix.ind_aux {i} (a : q.P.A i) (f' : q.P.drop.B _ a ‚ü∂ Œ±) (f : q.P.last.B i a ‚ü∂ q.P.W Œ±) :
  fix.mk (abs _ _ ‚ü®a, q.P.append_contents f' (Œª i x, ‚ü¶f x‚üß)‚ü©) = ‚ü¶q.P.W_mk a f' f‚üß :=
have fix.mk (abs _ _ ‚ü®a, q.P.append_contents f' (Œª i x, ‚ü¶f x‚üß)‚ü©) = ‚ü¶Wrepr (q.P.W_mk a f' f)‚üß,
  begin
    apply quot.sound, apply Wequiv.abs',
    rw [ipfunctor.W_dest'_W_mk'', abs_map', abs_repr', ‚Üêabs_map', ipfunctor.map_eq'],
    conv { to_rhs, rw [Wrepr_W_mk, q.P.W_dest'_W_mk'', abs_repr', ipfunctor.map_eq'] },
    congr' 2, rw [ipfunctor.append_contents, ipfunctor.append_contents],
    rw [append_fun, append_fun, ‚Üêsplit_fun_comp, ‚Üêsplit_fun_comp],
    reflexivity
  end,
by { rw this, apply quot.sound, apply Wrepr_equiv }

theorem fix.ind_rec {Œ≤ : fam J} (g‚ÇÅ g‚ÇÇ : fix F Œ± ‚ü∂ Œ≤)
    (h : ‚àÄ ‚¶Éi‚¶Ñ x : unit i ‚ü∂ F.obj (append1 Œ± (fix F Œ±)),
      x ‚â´ F.map (append_fun (ùüô _) g‚ÇÅ) = x ‚â´ F.map (append_fun (ùüô Œ±) g‚ÇÇ) ‚Üí
      x ‚â´ fix.mk ‚â´ g‚ÇÅ = x ‚â´ fix.mk ‚â´ g‚ÇÇ) :
  g‚ÇÅ = g‚ÇÇ :=
begin
  ext i x,
  apply quot.induction_on x, intros x,
  apply q.P.W_ind _ _ x, intros j a f' f ih,
  show g‚ÇÅ ‚ü¶q.P.W_mk a f' f‚üß = g‚ÇÇ ‚ü¶q.P.W_mk a f' f‚üß,
  rw [‚Üêfix.ind_aux a f' f],
  specialize h (value _ ((P F).obj (append1 Œ± (fix F Œ±))) ‚ü®a,ipfunctor.append_contents _ f' (Œª i x, ‚ü¶f x‚üß)‚ü© ‚â´ abs _ _) _,
  { replace h := congr_fun (congr_fun h j) unit.rfl, simp [value] at h, exact h },
  ext _ ‚ü®‚ü®‚ü® rfl ‚ü©‚ü©‚ü©, simp only [value, ipfunctor.append_contents, append_fun, ipfunctor.then_def],
  rw [‚Üê abs_map',‚Üê abs_map',ipfunctor.map_eq',ipfunctor.map_eq',‚Üê split_fun_comp,‚Üê split_fun_comp],
  congr' 3, ext, apply ih,
end

theorem fix.rec_unique {Œ≤ : fam J} (g : F.obj (append1 Œ± Œ≤) ‚ü∂ Œ≤) (h : fix F Œ± ‚ü∂ Œ≤)
    (hyp : fix.mk ‚â´ h = F.map (append_fun (ùüô _) h) ‚â´ g) :
  fix.rec g = h :=
begin
  apply fix.ind_rec,
  intros X x hyp', reassoc hyp',
  rw [hyp, ‚Üêhyp', fix.rec_eq]
end

theorem fix.mk_dest : fix.dest ‚â´ fix.mk = ùüô (fix F Œ±) :=
begin
  apply fix.ind_rec,
  rw [fix.dest, fix.rec_eq_assoc, ‚Üêcategory_theory.functor.map_comp_assoc, ‚Üêappend_fun_comp, category.id_comp, category.comp_id],
  intros X f h, reassoc h,
  rw [h,append_fun_id_id, category_theory.functor.map_id, category.id_comp]
end

theorem fix.dest_mk : fix.mk ‚â´ fix.dest = ùüô (F.obj (append1 Œ± (fix F Œ±))) :=
begin
  unfold fix.dest, rw [fix.rec_eq, ‚Üêfix.dest, ‚Üêcategory_theory.functor.map_comp],
  rw [‚Üê append_fun_comp, category.id_comp],
  rw [fix.mk_dest, append_fun_id_id, category_theory.functor.map_id]
end

theorem fix.ind {Œ± : fam I} (p : fam.Pred (fix F Œ±))
    (h : ‚àÄ j (x : unit j ‚ü∂ F.obj (Œ±.append1 (fix F Œ±))), liftp (pred_last Œ± p) x ‚Üí ‚àÄ a, p j (fix.mk $ x a)) :
  ‚àÄ j x, p j x :=
begin
  intros j a,
  apply quot.induction_on a, clear a,
  intro x,
  apply q.P.W_ind _ _ x, clear x j,
  intros i a f' f ih,
  change p _ ‚ü¶q.P.W_mk a f' f‚üß,
  rw [‚Üêfix.ind_aux a f' f],
  apply h i (value _ _ (abs _ (append1 Œ± (fix F Œ±))
          ‚ü®a,
           ipfunctor.append_contents (P F) f' (Œª (i_1 : J) (x : (ipfunctor.last (P F)).B i a i_1), ‚ü¶f x‚üß)‚ü©))
          _ unit.rfl,
  rw [iqpf.liftp_iff‚ÇÄ],
  rintros k ‚ü®‚ü®rfl‚ü©‚ü©,
  refine ‚ü®a, _, rfl, _‚ü©,
  rintros (i|i) x, { triv },
  dsimp [pred_last],
  apply ih
end

instance iqpf_fix : iqpf (pFix F) :=
{ P         := q.P.Wp,
  abs       := Œª Œ±, fix.quot.mk,
  repr      := Œª Œ±, fix.quot.dest,
  abs_repr  := by { intros Œ±, ext i x, apply quot.induction_on x, intro a, apply quot.sound, apply Wrepr_equiv },
  abs_map   :=
    begin
      intros Œ± Œ≤ g, conv { to_rhs, dsimp [pFix,functor.map]},
      ext i x, simp only [fix.map, ipfunctor.then_def],
      apply quot.sound, apply Wequiv.refl
    end }

end iqpf
