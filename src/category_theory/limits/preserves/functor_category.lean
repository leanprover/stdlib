/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import category_theory.limits.presheaf

/-!
# Preservation of (co)limits in the functor category

Show that if `X ‚®Ø -` preserves colimits in `D` for any `X : D`, then the product functor `F ‚®Ø -`
for `F : C ‚•§ D` preserves colimits.

The idea of the proof is simply that products and colimits in the functor category are computed
pointwise, so pointwise preservation implies general preservation.

# References

https://ncatlab.org/nlab/show/commutativity+of+limits+and+colimits#preservation_by_functor_categories_and_localizations

-/

universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

noncomputable theory

namespace category_theory

open category limits

variables {C : Type v‚ÇÇ} [category.{v‚ÇÅ} C]
variables {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]

/--
If `X √ó -` preserves colimits in `D` for any `X : D`, then the product functor `F ‚®Ø -` for
`F : C ‚•§ D` also preserves colimits.

Note this is (mathematically) a special case of the statement that
"if limits commute with colimits in `D`, then they do as well in `C ‚•§ D`"
but the story in Lean is a bit more complex, and this statement isn't directly a special case.
That is, even with a formalised proof of the general statement, there would still need to be some
work to convert to this version: namely, the natural isomorphism
`(evaluation C D).obj k ‚ãô prod.functor.obj (F.obj k) ‚âÖ prod.functor.obj F ‚ãô (evaluation C D).obj k`
-/
def functor_category.prod_preserves_colimits [has_binary_products D] [has_colimits D]
  [‚àÄ (X : D), preserves_colimits (prod.functor.obj X)]
  (F : C ‚•§ D) :
  preserves_colimits (prod.functor.obj F) :=
{ preserves_colimits_of_shape := Œª J ùí•, by exactI
  { preserves_colimit := Œª K,
    { preserves := Œª c t,
      begin
        apply evaluation_jointly_reflects_colimits _ (Œª k, _),
        change is_colimit ((prod.functor.obj F ‚ãô (evaluation _ _).obj k).map_cocone c),
        let := is_colimit_of_preserves ((evaluation C D).obj k ‚ãô prod.functor.obj (F.obj k)) t,
        apply is_colimit.map_cocone_equiv _ this,
        apply (nat_iso.of_components _ _).symm,
        { intro G,
          apply as_iso (prod_comparison ((evaluation C D).obj k) F G) },
        { intros G G',
          apply prod_comparison_natural ((evaluation C D).obj k) (ùüô F) },
      end } } }

end category_theory
