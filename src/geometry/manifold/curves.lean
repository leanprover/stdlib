/-
Copyright ¬© 2020 Nicol√≤ Cavalleri. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nicol√≤ Cavalleri
-/

import geometry.manifold.times_cont_mdiff_map
import geometry.manifold.instances.real

/-!
# Smooth curves

In this file we define the type `curve` of `n` times continuously differentiable bundled curves.
-/

noncomputable theory

open set

/-- where should this go? -/
def is_maximal {Œ± : Type*} [partial_order Œ±] (a : Œ±) : Prop := ‚àÄ b : Œ±, b ‚â• a ‚Üí b = a

open_locale manifold

section

/-- Smooth curve. -/
structure curve {E : Type*} [normed_group E] [normed_space ‚Ñù E]
  {H : Type*} [topological_space H] (I : model_with_corners ‚Ñù E H)
  (M : Type*) [inhabited M] [topological_space M] [charted_space H M]
  [smooth_manifold_with_corners I M] (n : with_top ‚Ñï) extends C‚Çó^n‚üÆùìò(‚Ñù), ‚Ñù; I, M‚üØ :=
(connected_source    : is_connected source)
(default_value       : ‚àÄ x ‚àâ source, to_fun x = default M)

variables {E : Type*} [normed_group E] [normed_space ‚Ñù E]
{H : Type*} [topological_space H] {I : model_with_corners ‚Ñù E H}
{M : Type*} [inhabited M] [topological_space M] [charted_space H M]
[smooth_manifold_with_corners I M] (n : with_top ‚Ñï)

namespace curve

instance : has_coe_to_fun (curve I M n) := ‚ü®_, Œª Œ≥, Œ≥.to_fun‚ü©

protected lemma times_cont_mdiff_on (Œ≥ : curve I M n) :
  times_cont_mdiff_on ùìò(‚Ñù) I n Œ≥ Œ≥.source := Œ≥.times_cont_mdiff_on_to_fun

protected lemma smooth (Œ≥ : curve I M ‚àû) :
  smooth_on ùìò(‚Ñù) I Œ≥ Œ≥.source := Œ≥.times_cont_mdiff_on_to_fun

@[ext] protected lemma ext {Œ≥ œÉ : curve I M n} (h_src : Œ≥.source = œÉ.source)
  (h : ‚àÄ x ‚àà Œ≥.source, Œ≥ x = œÉ x) : Œ≥ = œÉ :=
begin
  cases Œ≥, cases œÉ,
  congr',
  ext,
  { exact iff_of_eq (congr_arg (has_mem.mem x) h_src), },
  { intro x,
    by_cases h1 : (x ‚àà Œ≥__to_times_cont_mdiff_on_map.source),
    { exact (h x) h1, },
    { have h2 := Œ≥_default_value x h1,
      rw h_src at h1,
      have h3 := œÉ_default_value x h1,
      simp only [times_cont_mdiff_on_map.to_fun_eq_coe] at h2 h3,
      rw [h2, h3], } }
end

variables {M n}

/-- Constant curve of value `x`. -/
def const_curve (x : M) : curve I M n :=
{ connected_source := connected_space.is_connected_univ,
  default_value := Œª t, by simp only [forall_false_left, mem_univ, not_true,
    times_cont_mdiff_on_map.times_cont_mdiff_on_map_const_source],
  ..times_cont_mdiff_on_map.const x }

instance : inhabited (curve I M n) := ‚ü®const_curve (default M)‚ü©

/-- Speed of a curve at time `t` as a tangent vector. -/
def speed (Œ≥ : curve I M n) (t : ‚Ñù) : tangent_space I (Œ≥ t) :=
(deriv_within ((ext_chart_at I (Œ≥ t)) ‚àò Œ≥) Œ≥.source t : E)

instance : has_lt (curve I M n) :=
‚ü®Œª Œ≥‚ÇÅ Œ≥‚ÇÇ, Œ≥‚ÇÅ.source ‚äÇ Œ≥‚ÇÇ.source ‚àß ‚àÄ x ‚àà Œ≥‚ÇÅ.source, Œ≥‚ÇÅ x = Œ≥‚ÇÇ x‚ü©

instance : has_le (curve I M n) :=
‚ü®Œª Œ≥‚ÇÅ Œ≥‚ÇÇ, Œ≥‚ÇÅ.source ‚äÜ Œ≥‚ÇÇ.source ‚àß ‚àÄ x ‚àà Œ≥‚ÇÅ.source, Œ≥‚ÇÅ x = Œ≥‚ÇÇ x‚ü©

instance : partial_order (curve I M n) :=
{ le_refl := Œª Œ≥, ‚ü®subset.rfl, Œª x h, by refl‚ü©,
  le_trans := Œª Œ≥ œÉ œÅ, Œª h1 h2, ‚ü®subset.trans h1.1 h2.1, Œª x h, by rw [h1.2 x h, h2.2 x (h1.1 h)]‚ü©,
  le_antisymm := Œª Œ≥ œÉ, Œª h1 h2, by { ext1, exacts [subset.antisymm h1.1 h2.1, Œª x hx, h1.2 x hx] },
  ..curve.has_le }

end curve

end
